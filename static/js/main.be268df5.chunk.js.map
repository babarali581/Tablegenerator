{"version":3,"sources":["component/main.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","state","getInput","From","To","e","this","setState","target","value","console","log","parseInt","addOne","val","finalResp","i","push","style","fontSize","color","backgroundColor","height","width","display","flexDirection","alignItems","paddingTop","justifyContent","flexWrap","type","margin","textAlign","onChange","getInputFromUser","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+NA2DeA,E,YAzDX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,SAAU,EACVC,KAAM,EACNC,GAAK,GALM,E,8EAQFC,GAGbC,KAAKC,SAAS,CAACL,SAAWG,EAAEG,OAAOC,U,+BAK7B,IAAD,SACgBH,KAAKL,MAApBE,EADD,EACCA,KAAMC,EADP,EACOA,GACZM,QAAQC,IAAI,MAAMC,SAASR,GAAI,GAK9B,IAJD,IAAIS,EAASD,SAASR,GAAI,EACtBU,EAAMR,KAAKL,MAAMC,SACjBa,EAAY,GAEPC,EAAG,EAAIA,EAAIH,EAAQG,IAEd,IAANA,GAAWA,EAAIb,GAClBY,EAAUE,KAAK,uBAAGC,MAAQ,CAACC,SAAU,OAASC,MAAO,UAAYC,gBAAiB,KAAMP,EAAzE,MAAiFE,EAAjF,MAAuFF,EAAME,IAKjH,OACI,kBAAC,WAAD,KACI,yBAAKE,MAAQ,CAAEI,OAAO,QAAUC,MAAM,OAAQC,QAAS,OAASC,cAAe,SAAWC,WAAW,SAAWL,gBAAiB,YACjI,wBAAIH,MAAS,CAACS,WAAa,GAAKP,MAAO,YAAvC,mBAEH,yBAAKF,MAAQ,CAAEI,OAAO,IAAMC,MAAM,OAAQC,QAAS,OAAUI,eAAgB,SAAWF,WAAY,SAAUG,SAAS,SACxH,2CAEC,2BAAOC,KAAO,SAAUZ,MAAS,CAACI,OAAQ,OAASC,MAAO,OAAQQ,OAAO,MAAOC,UAAW,UAAWC,SAAU,SAAA5B,GAAC,OAAI,EAAK6B,iBAAiB7B,OAE3I,qCACK,2BAAOyB,KAAO,SAAUZ,MAAS,CAACI,OAAQ,OAASC,MAAO,OAASQ,OAAO,MAAOC,UAAW,UAAWC,SAAU,SAAA5B,GAAC,OAAI,EAAKE,SAAS,CAACJ,KAAOE,EAAEG,OAAOC,YAE1J,mCACG,2BAAOqB,KAAO,SAAUZ,MAAS,CAACI,OAAQ,OAASC,MAAO,OAAQQ,OAAO,MAAOC,UAAW,UAAWC,SAAU,SAAA5B,GAAC,OAAI,EAAKE,SAAS,CAACH,GAAKC,EAAEG,OAAOC,aAGrJ,yBAAKS,MAAS,CAACM,QAAS,QAASE,WAAa,WAC7CX,S,GAlDKoB,a,MCYJC,MATf,WACE,OACA,kBAAC,EAAD,OCMkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,a","file":"static/js/main.be268df5.chunk.js","sourcesContent":["import React, {Component, Fragment} from 'react'\nclass Main extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            getInput: 0,\n            From: 0,\n            To : 0\n        };\n      }\n    getInputFromUser(e){\n      //  console.log('value: ', e.target.value);\n   \n        this.setState({getInput : e.target.value})\n      \n\n    }\n\n    render() {\n        let  {From ,To} =    this.state\n        console.log(\"To \",parseInt(To)+1);\n        let addOne = parseInt(To)+1\n        let val = this.state.getInput\n        let finalResp = []\n        \n         for(let i= 0 ; i < addOne; i++){\n            // console.log(`${val} x ${i} : , ${val * i}` );\n             if(i !== 0 && i > From ){\n             finalResp.push(<p style= {{fontSize: '150%' , color: '#8B008B' , backgroundColor: ''}}>{val} x {i} = {val * i}</p>)\n             }\n\n            }\n       // this.state.getInput\n        return (\n            <Fragment>\n                <div style ={{ height:'100vh' , width:\"100%\", display: 'flex' , flexDirection: 'column' , alignItems:'center' , backgroundColor: '#EFEEEA' }}>\n                <h1 style = {{paddingTop : 40 , color :\"#8B008B\"}}>Table Generator</h1>\n\n             <div style ={{ height:300 , width:\"100%\", display: 'flex' ,  justifyContent: 'center' , alignItems: 'center' ,flexWrap:'wrap' }}>   \n            <div>\n                Enter Table\n             <input type = \"number\"  style = {{height: '30px' , width: '50px', margin:'5px' ,textAlign: 'center'}} onChange={e => this.getInputFromUser(e) }/>\n             </div>\n             <div>\n             From <input type = \"number\"  style = {{height: '30px' , width: '50px',  margin:'5px' ,textAlign: 'center'}} onChange={e => this.setState({From : e.target.value})} /> \n             </div>\n             <div>\n             To <input type = \"number\"  style = {{height: '30px' , width: '50px', margin:'5px' ,textAlign: 'center'}} onChange={e => this.setState({To : e.target.value})}/>\n             </div>\n             </div>\n             <div style = {{display: \"flext\", alignItems : 'center'}}>\n             {finalResp}\n             </div>\n             </div>\n            </Fragment>\n        )\n    }\n\n}\nexport default Main","import React from 'react';\nimport Main from './component/main'\nimport './App.css';\n\nfunction App() {\n  return (\n  <Main/>\n    // <div className=\"App\">\n    //  main\n    // </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}